// This source code is subject to the terms of the Mozilla Public License 2.0
// at https://mozilla.org/MPL/2.0/
// Â© Stonespb

//@version=5
strategy(title="Sveta & Vera's Strategy", shorttitle="SV Strategy",
         overlay=true)

////////////////////////////////////////////////////////////////////////////////
// EMA plots
emaSource = close
shortest = ta.ema(emaSource, 5)
short = ta.ema(emaSource, 30)
longer = ta.ema(emaSource, 60)

plot(shortest, color = color.red, title="Shortest EMA")
plot(short, color = color.orange, title="Short EMA")
plot(longer, color = color.aqua, title="Longer EMA")

////////////////////////////////////////////////////////////////////////////////
// Moving average, 2-line cross
fastLength = input.int(5, minval=1, title="EMA Fast Length")
slowLength = input.int(30, minval=1, title="EMA Slow Length")
mafast = ta.ema(emaSource, fastLength)
maslow = ta.ema(emaSource, slowLength)

longEMACrosspoint = ta.crossover(mafast, maslow)
shortEMACrosspoint = ta.crossunder(mafast, maslow)

// Additional conditions

// Base Line (Kijun)
basePeriods = 26
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
baseLine = donchian(basePeriods)
plot(baseLine, color=color.blue, title="Base Line (Kijun)")
// TODO: cross in 7 last bars?

longBaseline = low > baseLine
shortBaseline = high < baseLine

// RSI 50
rsiLength = input.int(14, minval=1, title="RSI Length")
rsiSource = close
rsiUp = ta.rma(math.max(ta.change(rsiSource), 0), rsiLength)
rsiDown = ta.rma(-math.min(ta.change(rsiSource), 0), rsiLength)
rsi = rsiDown == 0 ? 100 : rsiUp == 0 ? 0 : 100 - (100 / (1 + rsiUp / rsiDown))
// plot(rsi, color=color.purple, title="RSI")

rsiThreshold = 50
longRSI = rsi > rsiThreshold
shortRSI = rsi < rsiThreshold
// TODO: cross in 3 last bars?

////////////////////////////////////////////////////////////////////////////////
// Check conditions to trigger event

isSatisfiedImpl(condition, periods, start) =>
    result = false
    for i = start to start + periods - 1
        if condition[i]
            result := true
            break
    result

isSatisfiedRecently(condition) => isSatisfiedImpl(condition, 5, 0)
wasSatisfiedRecently(condition) => isSatisfiedImpl(condition, 4, 1)
isSatisfiedNow(condition) => condition[0]

check(emaCrosspoint, baseline, rsi) =>
    isSatisfiedRecently(emaCrosspoint)
         and isSatisfiedNow(baseline) and isSatisfiedNow(rsi)

shouldTriggerLong = check(longEMACrosspoint, longBaseline, longRSI)
shouldTriggerShort = check(shortEMACrosspoint, shortBaseline, shortRSI)
// Trigger only for the first time
if (wasSatisfiedRecently(shouldTriggerLong))
    shouldTriggerLong := false
if (wasSatisfiedRecently(shouldTriggerShort))
    shouldTriggerShort := false

////////////////////////////////////////////////////////////////////////////////
// UI and strategy actions

lbl = label.new(bar_index, na)
if (shouldTriggerLong)
    strategy.entry("SV Long", strategy.long, comment="L")
    label.set_color(lbl, color.blue)
    label.set_style(lbl, label.style_label_up)
    label.set_yloc(lbl, yloc.belowbar)
if (shouldTriggerShort)
    strategy.entry("SV Short", strategy.short, comment="S")
    label.set_color(lbl, color.red)
    label.set_style(lbl, label.style_label_down)
    label.set_yloc(lbl, yloc.abovebar)
barcolor(shouldTriggerLong or shouldTriggerShort ? color.yellow : na,
         title="Found entry point", editable=true)
